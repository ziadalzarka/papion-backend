# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  country: Country!
  city: City!
  street: String
  coords: Coordinates
}

input AddressCoordinatesInput {
  lat: Float!
  long: Float!
}

input AddressInput {
  country: Country!
  city: City!
  street: String
  coords: AddressCoordinatesInput
}

type AuthPayload {
  token: String!
  user: UserEntity!
}

type BaseServiceEntity {
  _id: ID!
  name: String!
  owner: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  acceptsMultiple: Boolean!
  published: Boolean!
  packagePriority: PackagePriority!
  gallery: [String!]!
  reservations: ReservationsPage!
  reviews: ReviewEntityPage!
  statistics: ServiceStatistics!
}

type BaseUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  profileImage: String
  address: Address
  userType: UserType!
}

input BusinessCalendarQueryInput {
  from: DateTime!
  to: DateTime!
  statuses: [ReservationStatus!]
  serviceId: ObjectID!
}

enum BusinessCategory {
  Place
  Person
}

input BusinessReservationResponseInput {
  accepted: Boolean!
  startingPrice: Float!
  availableDates: [DateTime!]!
  notes: String!
}

type BusinessUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  profileImage: String
  address: Address
  userType: UserType!
  businessCategory: BusinessCategory!
}

enum City {
  Damanhur
  Alexandria
  Cairo
}

type ClientUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  profileImage: String
  address: Address
  userType: UserType!
}

type Coordinates {
  lat: Float!
  long: Float!
}

enum Country {
  Egypt
}

input CreateBusinessUserInput {
  name: String!
  email: String!
  password: String!
  phone: String!
  address: AddressInput!
  businessCategory: BusinessCategory!
}

input CreateClientUserInput {
  name: String!
  email: String!
  password: String!
  phone: String!
  address: AddressInput!
}

input CreatePlaceServiceInput {
  name: String!
  address: AddressInput!
  description: String
  acceptsMultiple: Boolean
  startingPrice: Float
  coverImage: File
  category: PlaceCategory
  gallery: [File!]
  capacity: Float
  weddingWebsitesEnabled: Boolean
}

input CreateReviewCommentInput {
  body: String!
  review: ObjectID!
}

input CreateReviewInput {
  body: String
  rating: Float
  service: ObjectID!
}

type DatabaseEntity {
  _id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""File upload scalar type"""
scalar File

input FileUploadInput {
  file: File!
}

input LogInPayload {
  email: String!
  password: String!
}

input MultipleSearchPayloadInput {
  defaults: SearchPayloadInput!
  overrides: [SearchPayloadOverrideInput!]!
}

type Mutation {
  generatePasswordResetCode(email: String!): ResetPasswordUserSummary!
  resetPassword(payload: ResetPasswordInput!): ResetPasswordUserSummary!
  signUpClientUser(payload: CreateClientUserInput!): ClientUserEntity!
  signUpBusinessUser(payload: CreateBusinessUserInput!): BusinessUserEntity!
  updateProfile(payload: UpdateUserProfileInput!): UserEntity!
  publishPersonBusiness: PersonServiceEntity!
  updatePersonBusiness(payload: UpdatePersonServiceInput!): PersonServiceEntity!
  unpublishPersonBusiness: PersonServiceEntity!
  publishPlaceBusiness(id: ObjectID!): PlaceServiceEntity!
  createPlaceBusiness(payload: CreatePlaceServiceInput!): PlaceServiceEntity!
  updatePlaceBusiness(payload: UpdatePlaceServicePayloadInput!): PlaceServiceEntity!
  unpublishPlaceBusiness(id: ObjectID!): PlaceServiceEntity!
  createWeddingWebsite(payload: WeddingWebsiteInput!): WeddingWebsiteEntity!
  updateWeddingWebsite(payload: UpdateWeddingWebsitePayloadInput!): WeddingWebsiteEntity!
  deleteWeddingWebsite(id: ObjectID!): WeddingWebsiteEntity!
  submitReservationRequest(payload: ReserveServiceInput!): ReservationEntity!
  clientRefuseReservation(id: ObjectID!): ReservationEntity!
  clientApproveReservation(id: ObjectID!): ReservationEntity!
  markAsSeen(last: ObjectID!): Boolean!
  personBusinessMarkCalendar(payload: ServiceMarkCalendarInput!): ReservationEntity!
  personBusinessDeleteCalendarMark(id: ObjectID!): ReservationEntity!
  placeBusinessMarkCalendar(payload: PlaceBusinessMarkCalendarInput!): ReservationEntity!
  placeBusinessDeleteCalendarMark(id: ObjectID!): ReservationEntity!
  businessRespondToReservation(payload: RespondToReservationInput!): ReservationEntity!
  businessRefuseReservation(id: ObjectID!): ReservationEntity!
  businessConfirmReservation(id: ObjectID!): ReservationEntity!
  businessCancelReservation(id: ObjectID!): ReservationEntity!
  postReview(payload: CreateReviewInput!): ReviewEntity!
  updateReview(payload: UpdateReviewPayloadInput!): ReviewEntity!
  deleteReview(id: ObjectID!): ReviewEntity!
  postReviewComment(payload: CreateReviewCommentInput!): ReviewCommentEntity!
  updateReviewComment(payload: UpdateReviewCommentPayloadInput!): ReviewCommentEntity!
  deleteReviewComment(id: ObjectID!): ReviewCommentEntity!
}

union NotificationData = ReservationEntity | WeddingWebsiteEntity

type NotificationEntity {
  _id: ID!
  notificationType: NotificationType!
  data: NotificationData!
  dataRef: ObjectID!
  addedAt: DateTime!
  seen: Boolean!
}

type NotificationEntityPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  edges: [NotificationEntity!]!
}

enum NotificationType {
  WeddingWebsiteCreated
  BusinessRepliedToReservation
}

"""Mongo ObjectID scalar type"""
scalar ObjectID

type PackageEntity {
  name: String!
  priority: PackagePriority!
  price: Float!
  description: String!
}

enum PackagePriority {
  Gold
  Silver
  Free
}

input PersonBusinessCalendarQueryInput {
  from: DateTime!
  to: DateTime!
  statuses: [ReservationStatus!]
}

enum PersonCategory {
  Photographer
  WeddingPlanner
}

type PersonServiceEntity {
  _id: ID!
  name: String!
  owner: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  acceptsMultiple: Boolean!
  published: Boolean!
  packagePriority: PackagePriority!
  gallery: [String!]!
  reservations(page: Float!): ReservationsPage!
  reviews(page: Float!): ReviewEntityPage!
  statistics: ServiceStatistics!
  image: String
  category: PersonCategory
}

input PlaceBusinessCalendarQueryInput {
  from: DateTime!
  to: DateTime!
  statuses: [ReservationStatus!]
  serviceId: ObjectID!
}

input PlaceBusinessMarkCalendarInput {
  """
  Pass an id if you want to edit a reservation. Passing no id would create a new reservation.
  """
  id: ObjectID
  reservationDay: DateTime!
  status: ReservationStatus!
  notes: String!
  serviceId: ObjectID!
}

type PlaceBusinessReservationEntity {
  _id: ID!
  service: PlaceServiceEntity!
  reservationDay: DateTime!
  notes: String!
  status: ReservationStatus!
  client: ClientUserEntity
  response: ReservationResponse
}

type PlaceBusinessReservationEntityPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  edges: [PlaceBusinessReservationEntity!]!
}

enum PlaceCategory {
  Hotel
  OpenAir
  Hall
}

type PlaceServiceEntity {
  _id: ID!
  name: String!
  owner: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  acceptsMultiple: Boolean!
  published: Boolean!
  packagePriority: PackagePriority!
  gallery: [String!]!
  reservations(page: Float!): ReservationsPage!
  reviews(page: Float!): ReviewEntityPage!
  statistics: ServiceStatistics!
  coverImage: String
  category: PlaceCategory
  capacity: Float
  weddingWebsitesEnabled: Float!
}

input PriceRangeInput {
  startPrice: Float!
  endPrice: Float!
}

type Query {
  me: UserEntity!
  logIn(payload: LogInPayload!): AuthPayload!
  passwordResetCodeSummary(code: String!): ResetPasswordUserSummary!
  search(payload: SearchPayloadInput!): ServiceSearchOutput!
  searchMultiple(payload: MultipleSearchPayloadInput!): [ServiceSearchOutput!]!
  service(id: ObjectID!): ServiceEntity!
  personBusiness: PersonServiceEntity!
  placeBusinesses: [PlaceServiceEntity!]!
  placeBusiness(id: ObjectID!): PlaceServiceEntity!
  weddingWebsite(
    """Leave empty to get the current user wedding website"""
    subdomain: String
  ): WeddingWebsiteEntity
  templates: [TemplateEntity!]!
  reservations(page: Float): ReservationsPage!
  notifications(page: Float!): NotificationEntityPage!
  packages: [PackageEntity!]!
  personBusinessCalendar(payload: PersonBusinessCalendarQueryInput!): [ReservationEntity!]!
  placeBusinessCalendar(payload: PlaceBusinessCalendarQueryInput!): [ReservationEntity!]!
  businessReservations(page: Float!): ReservationsPage!
}

type ReservationEntity {
  _id: ID!
  service: ServiceEntity!
  reservationDay: DateTime!
  notes: String!
  status: ReservationStatus!
  client: ClientUserEntity
  response: ReservationResponse
}

type ReservationResponse {
  accepted: Boolean!
  startingPrice: Float!
  availableDates: [DateTime!]!
  notes: String!
}

type ReservationsPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  edges: [ReservationEntity!]!
}

enum ReservationStatus {
  Reserved
  PendingConfirmation
  Responded
  Pending
  ClientRefused
  BusinessRefused
  LeftUnconfirmed
  Canceled
}

input ReserveServiceInput {
  reservationDay: DateTime!
  notes: String!
  service: ObjectID!
}

input ResetPasswordInput {
  code: String!
  password: String!
}

type ResetPasswordUserSummary {
  name: String!
  email: String!
}

input RespondToReservationInput {
  id: ObjectID!
  data: BusinessReservationResponseInput!
}

type ResultsPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
}

type ReviewCommentEntity {
  _id: ID!
  body: String!
  user: UserEntity!
}

type ReviewCommentEntityPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  edges: [ReviewCommentEntity!]!
}

type ReviewEntity {
  _id: ID!
  body: String!
  rating: Float!
  user: UserEntity!
  service: ServiceEntity!
  comments(page: Float!): ReviewCommentEntityPage!
}

type ReviewEntityPage {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  edges: [ReviewEntity!]!
}

input SearchPayloadInput {
  query: String
  category: ServiceCategory
  priceRange: PriceRangeInput
  timeRange: TimeRangeInput
  packagePriority: [PackagePriority!]
  country: Country
  city: City
  page: Float
  orderBy: ServiceSearchOrderBy
  sortKey: SortKey
  minCapacity: Float
}

input SearchPayloadOverrideInput {
  key: String!
  payload: SearchPayloadInput!
}

enum ServiceCategory {
  Hotel
  OpenAir
  Hall
  Photographer
  WeddingPlanner
}

union ServiceEntity = PersonServiceEntity | PlaceServiceEntity

input ServiceMarkCalendarInput {
  """
  Pass an id if you want to edit a reservation. Passing no id would create a new reservation.
  """
  id: ObjectID
  reservationDay: DateTime!
  status: ReservationStatus!
  notes: String!
}

enum ServiceSearchOrderBy {
  Price
  Rating
  Time
  Popularity
  AddedAt
}

type ServiceSearchOutput {
  pages: Float!
  hasNext: Boolean!
  total: Float!
  key: String
  edges: [ServiceEntity!]!
}

type ServiceStatistics {
  searchHits: Float!
  pageHits: Float!
  onGoingRequests: Float!
  reservations: Float!
}

enum SortKey {
  Ascending
  Descending
}

type Subscription {
  notificationReceived: NotificationEntity!
  reservationChanges(services: [ObjectID!]): ReservationEntity!
}

type TemplateEntity {
  _id: ID!
  name: String!
  preview_url: String!
  stylesheet_url: String!
}

input TimeRangeInput {
  startDate: DateTime!
  endDate: DateTime!
}

input UpdateAddressCoordinatesInput {
  lat: Float
  long: Float
}

input UpdateAddressInput {
  country: Country
  city: City
  street: String
  coords: UpdateAddressCoordinatesInput
}

input UpdateGalleryInput {
  """Add images to gallery"""
  add: [File!]

  """Remove images from gallery"""
  remove: [String!]
}

input UpdatePersonServiceInput {
  name: String
  address: UpdateAddressInput
  description: String
  acceptsMultiple: Boolean
  startingPrice: Float
  image: File
  category: PersonCategory
  gallery: UpdateGalleryInput
}

input UpdatePlaceServiceInput {
  name: String
  address: AddressInput
  description: String
  acceptsMultiple: Boolean
  startingPrice: Float
  rating: Float
  coverImage: File
  category: PlaceCategory
  gallery: UpdateGalleryInput
  capacity: Float
  weddingWebsitesEnabled: Boolean
}

input UpdatePlaceServicePayloadInput {
  id: ObjectID!
  data: UpdatePlaceServiceInput!
}

input UpdateReviewCommentInput {
  body: String!
}

input UpdateReviewCommentPayloadInput {
  id: ObjectID!
  data: UpdateReviewCommentInput!
}

input UpdateReviewInput {
  body: String
  rating: Float
}

input UpdateReviewPayloadInput {
  id: ObjectID!
  data: UpdateReviewInput!
}

input UpdateUserProfileInput {
  name: String
  profileImage: File
  address: AddressInput
  password: String
  email: String
  oldPassword: String
}

input UpdateWeddingWebsiteDataInput {
  coupleName: String
  image: File
  description: String
}

input UpdateWeddingWebsiteInput {
  data: WeddingWebsiteDataInput!
  templateId: ObjectID
}

input UpdateWeddingWebsitePayloadInput {
  id: ObjectID!
  data: UpdateWeddingWebsiteInput!
}

union UserEntity = BusinessUserEntity | ClientUserEntity

enum UserType {
  Admin
  Client
  Business
}

type WeddingWebsiteData {
  coupleName: String!
  image: File
  description: String
}

input WeddingWebsiteDataInput {
  coupleName: String!
  image: File
  description: String
}

type WeddingWebsiteEntity {
  _id: ID!
  subdomain: String!
  data: WeddingWebsiteData!
  user: ClientUserEntity!
  href: String!
  template: TemplateEntity!
  venue: PlaceServiceEntity!
}

input WeddingWebsiteInput {
  subdomain: String!
  data: WeddingWebsiteDataInput!
  templateId: ObjectID!
  reservationId: ObjectID!
}
