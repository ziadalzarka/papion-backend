# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  country: Country!
  city: City!
  street: String
  coords: Coordinates
}

input AddressCoordinatesInput {
  lat: Float!
  long: Float!
}

input AddressInput {
  country: Country!
  city: City!
  street: String
  coords: AddressCoordinatesInput
}

type AuthPayload {
  token: String!
  user: UserEntity!
}

type BaseServiceEntity {
  _id: ID!
  name: String!
  user: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  published: Boolean!
}

type BaseUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  address: Address
  userType: UserType!
}

enum BusinessCategory {
  Place
  Person
}

type BusinessUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  address: Address
  userType: UserType!
  businessCategory: BusinessCategory!
}

enum City {
  Damanhur
}

type ClientUserEntity {
  _id: ID!
  name: String!
  email: String!
  phone: String
  address: Address
  userType: UserType!
}

type Coordinates {
  lat: Float!
  long: Float!
}

enum Country {
  Egypt
}

input CreateBusinessUserInput {
  name: String!
  email: String!
  password: String!
  phone: String!
  address: AddressInput!
  businessCategory: BusinessCategory!
}

input CreateClientUserInput {
  name: String!
  email: String!
  password: String!
  phone: String!
  address: AddressInput!
}

input CreatePlaceServiceInput {
  name: String!
  address: AddressInput!
  description: String
  startingPrice: Float
  coverImage: File
  category: PlaceCategory
}

type DatabaseEntity {
  _id: ID!
}

"""File upload scalar type"""
scalar File

input FileUploadInput {
  file: File!
}

input LogInPayload {
  email: String!
  password: String!
}

type Mutation {
  createWeddingWebsite(payload: WeddingWebsiteInput!): WeddingWebsiteEntity!
  signUpClientUser(payload: CreateClientUserInput!): ClientUserEntity!
  signUpBusinessUser(payload: CreateBusinessUserInput!): BusinessUserEntity!
  publishPersonBusiness: PersonServiceEntity!
  updatePersonBusiness(payload: UpdatePersonServiceInput!): PersonServiceEntity!
  unpublishPersonBusiness: PersonServiceEntity!
  publishPlaceBusiness(id: ObjectID!): PlaceServiceEntity!
  createPlaceBusiness(payload: CreatePlaceServiceInput!): PlaceServiceEntity!
  updatePlaceBusiness(payload: UpdatePlaceServicePayloadInput!): PlaceServiceEntity!
  unpublishPlaceBusiness(id: ObjectID!): PlaceServiceEntity!
}

"""Mongo ObjectID scalar type"""
scalar ObjectID

type PackageEntity {
  name: String!
  priority: PackagePriority!
  price: Float!
  description: String!
}

enum PackagePriority {
  Gold
  Silver
  Free
}

enum PersonCategory {
  Photographer
  WeddingPlanner
}

type PersonServiceEntity {
  _id: ID!
  name: String!
  user: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  published: Boolean!
  image: String
  category: PersonCategory
}

enum PlaceCategory {
  Hotel
  OpenAir
  Hall
}

type PlaceServiceEntity {
  _id: ID!
  name: String!
  user: BusinessUserEntity!
  businessCategory: BusinessCategory!
  address: Address!
  description: String
  startingPrice: Float
  rating: Float!
  published: Boolean!
  coverImage: String
  category: PlaceCategory
}

input PriceRangeInput {
  startPrice: Float!
  endPrice: Float!
}

type Query {
  weddingWebsite(subdomain: String!): WeddingWebsiteEntity!
  me: UserEntity!
  logIn(payload: LogInPayload!): AuthPayload!
  search(payload: SearchPayloadInput!): [ServiceEntity!]!
  personBusiness: PersonServiceEntity!
  placeBusinesss: [PlaceServiceEntity!]!
  templates: [TemplateEntity!]!
  packages: [PackageEntity!]!
}

input SearchPayloadInput {
  query: String!
  category: ServiceCategory!
  priceRange: PriceRangeInput!
  packagePriority: [PackagePriority!]!
  page: Float!
  orderBy: ServiceSearchOrderBy!
}

enum ServiceCategory {
  Hotel
  OpenAir
  Hall
  Photographer
  WeddingPlanner
}

union ServiceEntity = PersonServiceEntity | PlaceServiceEntity

enum ServiceSearchOrderBy {
  Price
  Rating
  Time
  Popularity
  AddedAt
}

type TemplateEntity {
  _id: ID!
  name: String!
  preview_url: String!
  stylesheet_url: String!
}

input UpdateAddressCoordinatesInput {
  lat: Float
  long: Float
}

input UpdateAddressInput {
  country: Country
  city: City
  street: String
  coords: UpdateAddressCoordinatesInput
}

input UpdatePersonServiceInput {
  name: String
  address: UpdateAddressInput
  description: String
  startingPrice: Float
  image: File
  category: PersonCategory
}

input UpdatePlaceServiceInput {
  name: String
  address: AddressInput
  description: String
  startingPrice: Float
  rating: Float
  coverImage: File
  category: PlaceCategory
}

input UpdatePlaceServicePayloadInput {
  id: ObjectID!
  data: UpdatePlaceServiceInput!
}

union UserEntity = BusinessUserEntity | ClientUserEntity

enum UserType {
  Admin
  Client
  Business
}

type WeddingWebsiteData {
  coupleName: String!
  image: File
  description: String
}

input WeddingWebsiteDataInput {
  coupleName: String!
  image: File
  description: String
}

type WeddingWebsiteEntity {
  _id: ID!
  subdomain: String!
  data: WeddingWebsiteData!
  user: ClientUserEntity!
  href: String!
  template: TemplateEntity!
}

input WeddingWebsiteInput {
  subdomain: String!
  data: WeddingWebsiteDataInput!
  templateId: ObjectID!
}
